September 8, 2021
Trying to better understand the server's memory footprint.
@commit 01ce95f83a6e69c23a8cc02e807d4041750556d7


Summary

	Moving to SerialGC cut native memory in half, from 110 MB to 52 MB.
	This is the garbage collector Oracle recommends for low-memory environments.

	Initial State: Java 16
		Hit with "ab -n 50000 -c 25"
		Socket timeout after 15000 requests.
		RSS : +43,524K
		HEAP: +23,349K (only 54% of RSS increase).
	Try #1: Java 16, -Xmx10m
		ab -n 50000 -c 15 http://127.0.0.1:8080/
		The server stopped processing requests.
		RSS : +51,820K
	Try #2: Java 16, -Xmx10m (same) but modify BaseHTTPHandler to catch Throwable
		ab -n 25000 -c 15 http://127.0.0.1:8080/
		Connection timeout
		RSS +32,880K
	Try #3 Java 16, -Xmx10m, -XX:+UseZGC
		ZGC uses a ton of heap
	Try #4: track native memory
		total committed=110 MB
		total reserved=1,404 MB
	Try #5:	-XX:+UseSerialGC
		total committed=52 MB
		total reserved=1,346 MB
		total rss: 75 MB


Initial State

	Summary
		Hit with "ab -n 50000 -c 25"
		Socket timeout after 15000 requests.
		RSS : +43,524K
		HEAP: +23,349K (only 54% of RSS increase).

	./start.sh (no changes)
	Look at heap.

		mark@Marks-MBP-3 tinyjhttpd % ./start.sh > jhttpd.log
		mark@Marks-MBP-3 tinyjhttpd % jps -l
		80608 org.jetbrains.idea.maven.server.RemoteMavenServer36
		81003 com.markbucciarelli.tinyjhttpd
		80588
		81006 jdk.jcmd/sun.tools.jps.Jps
		mark@Marks-MBP-3 tinyjhttpd %

		% N=81003

		mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
		   RSS
		 38556

		mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
		81003:
		 garbage-first heap   total 28672K, used 3387K [0x0000000700000000, 0x0000000800000000)
		  region size 2048K, 1 young (2048K), 0 survivors (0K)
		 Metaspace       used 1467K, committed 1600K, reserved 1056768K
		  class space    used 140K, committed 192K, reserved 1048576K
		mark@Marks-MBP-3 tinyjhttpd %

		mark@Marks-MBP-3 tinyjhttpd % jstat -gc $N
		    S0C         S1C         S0U         S1U          EC           EU
		    0.0         0.0         0.0         0.0       8192.0          0.0

		    OC           OU          MC         MU       CCSC      CCSU     YGC     YGCT
		   20480.0       2895.3     1600.0     1448.8     192.0     137.7      0     0.000

		    FGC    FGCT     CGC    CGCT       GCT
		    1     0.005     0     0.000     0.005
		mark@Marks-MBP-3 tinyjhttpd %

				+-------+-------------------------------------------+
				|Column |                Description                |
				+-------+-------------------------------------------+
		      0		|SOC    | Current survivor space 0 capacity (KB).   |
		      0		|S1C    | Current survivor space 1 capacity (KB).   |
		      0		|S0U    | Survivor space 0 utilization (KB).        |
		      0		|S1U    | Survivor space 1 utilization (KB).        |
		 8192.0		|EC     | Current eden space capacity (KB).         |
		      0		|EU     | Eden space utilization (KB).              |
		20480.0		|OC     | Current old space capacity (KB).          |
		 2895.3		|OU     | Old space utilization (KB).               |
		 1600.0		|MC     | Metaspace capacity (KB).                  |
		 1448.8		|MU     | Used space from Metaspace (KB).           |
		  192.0		|CCSC   | Compressed class space capacity (KB).     |
		  137.7		|CCSU   | Used space for compressed classes (KB).   |
				|PC     | Current permanent space capacity (KB).    |
				|PU     | Permanent space utilization (KB).         |
		      0		|YGC    | Number of young generation GC Events.     |
		      0		|YGCT   | Young generation garbage collection time. |
		      1		|FGC    | Number of full GC events.                 |
		  0.005		|FGCT   | Full garbage collection time.             |
		  0.005		|GCT    | Total garbage collection time.            |
				+-------+-------------------------------------------+


	Hit it hard with ab.

		mark@Marks-MBP-3 tinyjhttpd % time ab -n 50000 -c 25 http://127.0.0.1:8080/
		This is ApacheBench, Version 2.3 <$Revision: 1879490 $>
		Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
		Licensed to The Apache Software Foundation, http://www.apache.org/

		Benchmarking 127.0.0.1 (be patient)
		Completed 5000 requests
		Completed 10000 requests
		Completed 15000 requests
		apr_socket_recv: Operation timed out (60)
		Total of 16323 requests completed
		ab -n 50000 -c 25 http://127.0.0.1:8080/
		0.19s user 1.04s system 3% cpu 31.822 total

	Now look at RSS and GC.heap_info

		mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
		   RSS
		 82080
		mark@Marks-MBP-3 tinyjhttpd %

		HEAP AFTER
			mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
			81003:
			 garbage-first heap   total 28672K, used 12692K [0x0000000700000000, 0x0000000800000000)
			  region size 2048K, 6 young (12288K), 1 survivors (2048K)
			 Metaspace       used 2224K, committed 2432K, reserved 1056768K
			  class space    used 179K, committed 320K, reserved 1048576K
			mark@Marks-MBP-3 tinyjhttpd %

		HEAP BEFORE

			mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
			81003:
			 garbage-first heap   total 28672K, used 3387K [0x0000000700000000, 0x0000000800000000)
			  region size 2048K, 1 young (2048K), 0 survivors (0K)
			 Metaspace       used 1467K, committed 1600K, reserved 1056768K
			  class space    used 140K, committed 192K, reserved 1048576K
			mark@Marks-MBP-3 tinyjhttpd %

		HEAP DELTAS
			garbage-first heap, total	     0
			garbage-first heap, used	+ 9305K
			region size			     0
			young regions			+10240K (+5 regions)
			survivor regions                + 2048K (+1 region)
			metaspace, used			+  757K
			metaspace, committed		+  832K
			metaspace, reserved                  0
			class space, used               +   39K
			class space, committed		+  128K
			class space, reserved                0
						---------------
							+23349 (22.8 MB)

		RSS
			BEFORE	38556K
			AFTER	82080K
			DELTA  +43524K	<-- One 54% of this is represented by GC.heap_info
					    ===============================================





		mark@Marks-MBP-3 tinyjhttpd % jstat -gc $N
		    S0C         S1C         S0U         S1U          EC           EU           OC           OU          MC         MU       CCSC      CCSU     YGC     YGCT     FGC    FGCT     CGC    CGCT       GCT
			0.0      2048.0         0.0         6.0      12288.0       8192.0      14336.0       3128.8     2432.0     2224.8     320.0     179.0     46     0.020     1     0.005     0     0.000     0.025
		mark@Marks-MBP-3 tinyjhttpd %

	       BEFORE 	  AFTER
					+-------+-------------------------------------------+
					|Column |                Description                |
					+-------+-------------------------------------------+
		      0			|SOC    | Current survivor space 0 capacity (KB).   |
		      0	  2048.0	|S1C    | Current survivor space 1 capacity (KB).   |
		      0	     		|S0U    | Survivor space 0 utilization (KB).        |
		      0	     6.0	|S1U    | Survivor space 1 utilization (KB).        |
		 8192.0	 12288.0	|EC     | Current eden space capacity (KB).         |
		      0	  8192.0	|EU     | Eden space utilization (KB).              |
		20480.0	 14336.0	|OC     | Current old space capacity (KB).          |
		 2895.3	  3128.8	|OU     | Old space utilization (KB).               |
		 1600.0	  2432.0	|MC     | Metaspace capacity (KB).                  |
		 1448.8	  2224.8	|MU     | Used space from Metaspace (KB).           |
		  192.0	   320.0	|CCSC   | Compressed class space capacity (KB).     |
		  137.7	   179.0 	|CCSU   | Used space for compressed classes (KB).   |
					|PC     | Current permanent space capacity (KB).    |
					|PU     | Permanent space utilization (KB).         |
		      0	      46	|YGC    | Number of young generation GC Events.     |
		      0	   0.020	|YGCT   | Young generation garbage collection time. |
		      1	       1	|FGC    | Number of full GC events.                 |
		  0.005	   0.005	|FGCT   | Full garbage collection time.             |
		  0.005	   0.025	|GCT    | Total garbage collection time.            |
					+-------+-------------------------------------------+


Try #1: Limit heap to 10MB

	Setup

		java -Xmx10m -p mlib:lib -m com.markbucciarelli.tinyjhttpd $port &

		81233 tinyjhttpd
                80608 RemoteMavenServer36
                81234 Jps
                80588
                mark@Marks-MBP-3 tinyjhttpd % N=81233
                mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
                   RSS
                 39916
                mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
                81233:
                 garbage-first heap   total 10240K, used 2029K [0x00000007ff600000, 0x0000000800000000)
                  region size 1024K, 1 young (1024K), 0 survivors (0K)
                 Metaspace       used 1456K, committed 1600K, reserved 1056768K
                  class space    used 140K, committed 192K, reserved 1048576K
                mark@Marks-MBP-3 tinyjhttpd %

	Execute


		mark@Marks-MBP-3 tinyjhttpd % time ab -n 50000 -c 15 http://127.0.0.1:8080/
                This is ApacheBench, Version 2.3 <$Revision: 1879490 $>
                Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
                Licensed to The Apache Software Foundation, http://www.apache.org/

                Benchmarking 127.0.0.1 (be patient)
                Completed 5000 requests
                Completed 10000 requests
                Completed 15000 requests
                ^C
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                	Was just sitting there, I think it locked up.


                Server Software:
                Server Hostname:        127.0.0.1
                Server Port:            8080

                Document Path:          /
                Document Length:        50 bytes

                Concurrency Level:      15
                Time taken for tests:   22.657 seconds
                Complete requests:      16308
                Failed requests:        0
                Non-2xx responses:      16308
                Total transferred:      1973268 bytes
                HTML transferred:       815400 bytes
                Requests per second:    719.76 [#/sec] (mean)
                Time per request:       20.840 [ms] (mean)
                Time per request:       1.389 [ms] (mean, across all concurrent requests)
                Transfer rate:          85.05 [Kbytes/sec] received

                Connection Times (ms)
                              min  mean[+/-sd] median   max
                Connect:        0    1  13.0      0    1657
                Processing:     0    6  48.5      4    1658
                Waiting:        0    6  46.7      4    1658
                Total:          1    7  50.2      4    1661

                Percentage of the requests served within a certain time (ms)
                  50%      4
                  66%      5
                  75%      5
                  80%      5
                  90%      8
                  95%     11
                  98%     14
                  99%     16
                 100%   1661 (longest request)
                ab -n 50000 -c 15 http://127.0.0.1:8080/  0.20s user 1.04s system 5% cpu 22.676 total
                mark@Marks-MBP-3 tinyjhttpd %

	Results

		mark@Marks-MBP-3 tinyjhttpd % jps
                81233 tinyjhttpd
                80608 RemoteMavenServer36
                81256 Jps
                80588
                mark@Marks-MBP-3 tinyjhttpd % echo $N
                81233
                mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
                   RSS
                 91736
                mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
                81233:
                 garbage-first heap   total 10240K, used 2145K [0x00000007ff600000, 0x0000000800000000)
                  region size 1024K, 2 young (2048K), 1 survivors (1024K)
                 Metaspace       used 2223K, committed 2432K, reserved 1056768K
                  class space    used 179K, committed 320K, reserved 1048576K
                mark@Marks-MBP-3 tinyjhttpd %




Try #2: -Xmx10m (same) but modify BaseHTTPHandler to catch Throwable
	mark@Marks-MBP-3 tinyjhttpd % ab -n 25000 -c 15 http://127.0.0.1:8080/
        This is ApacheBench, Version 2.3 <$Revision: 1879490 $>
        Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
        Licensed to The Apache Software Foundation, http://www.apache.org/

        Benchmarking 127.0.0.1 (be patient)
        Completed 2500 requests
        Completed 5000 requests
        Completed 7500 requests
        Completed 10000 requests
        Completed 12500 requests
        Completed 15000 requests
        apr_socket_recv: Operation timed out (60)
        Total of 16320 requests completed
        mark@Marks-MBP-3 tinyjhttpd % jls
        zsh: command not found: jls
        mark@Marks-MBP-3 tinyjhttpd % jps
        84642 Jps
        84628 tinyjhttpd
        82566
        mark@Marks-MBP-3 tinyjhttpd %


        mark@Marks-MBP-3 tinyjhttpd % jps
        84642 Jps
        84628 tinyjhttpd
        82566

        mark@Marks-MBP-3 tinyjhttpd % N=84628

        mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
           RSS
         71496

        mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
        84628:
         garbage-first heap   total 10240K, used 3961K [0x00000007ff600000, 0x0000000800000000)
          region size 1024K, 3 young (3072K), 1 survivors (1024K)
         Metaspace       used 2198K, committed 2432K, reserved 1056768K
          class space    used 174K, committed 320K, reserved 1048576K

        mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.run
        84628:
        Command executed successfully

        mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
        84628:
         garbage-first heap   total 10240K, used 1993K [0x00000007ff600000, 0x0000000800000000)
          region size 1024K, 1 young (1024K), 0 survivors (0K)
         Metaspace       used 2168K, committed 2432K, reserved 1056768K
          class space    used 167K, committed 320K, reserved 1048576K

        mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
           RSS
         71436




Good StackOverflow on Java memory usage
https://stackoverflow.com/a/53624438/1789168

	So what takes memory in a Java process?

        JVM parts (mostly shown by Native Memory Tracking)

        Java Heap
        -----------------------------------
        The most obvious part. This is where Java objects live. Heap takes up
        to -Xmx amount of memory.

        Garbage Collector
        -----------------------------------
        GC structures and algorithms require additional memory for heap
        management. These structures are Mark Bitmap, Mark Stack (for
        traversing object graph), Remembered Sets (for recording inter-region
        references) and others. Some of them are directly tunable, e.g.
        -XX:MarkStackSizeMax, others depend on heap layout, e.g. the larger
        are G1 regions (-XX:G1HeapRegionSize), the smaller are remembered sets.

        GC memory overhead varies between GC algorithms. -XX:+UseSerialGC and
        -XX:+UseShenandoahGC have the smallest overhead. G1 or CMS may easily
        use around 10% of total heap size.

        Code Cache
        -----------------------------------
        Contains dynamically generated code: JIT-compiled methods, interpreter
        and run-time stubs. Its size is limited by -XX:ReservedCodeCacheSize
        (240M by default). Turn off -XX:-TieredCompilation to reduce the
        amount of compiled code and thus the Code Cache usage.

        Compiler
        -----------------------------------
        JIT compiler itself also requires memory to do its job. This can be
        reduced again by switching off Tiered Compilation or by reducing the
        number of compiler threads: -XX:CICompilerCount.

        Class loading
        -----------------------------------
        Class metadata (method bytecodes, symbols, constant pools, annotations
        etc.) is stored in off-heap area called Metaspace. The more classes
        are loaded - the more metaspace is used. Total usage can be limited by
        -XX:MaxMetaspaceSize (unlimited by default) and
        -XX:CompressedClassSpaceSize (1G by default).

        Symbol tables
        -----------------------------------
        Two main hashtables of the JVM: the Symbol table contains names,
        signatures, identifiers etc. and the String table contains references
        to interned strings. If Native Memory Tracking indicates significant
        memory usage by a String table, it probably means the application
        excessively calls String.intern.

        Threads
        -----------------------------------
        Thread stacks are also responsible for taking RAM. The stack size is
        controlled by -Xss. The default is 1M per thread, but fortunately the
        things are not so bad. OS allocates memory pages lazily, i.e. on the
        first use, so the actual memory usage will be much lower (typically
        80-200 KB per thread stack). I wrote a script to estimate how much
        of RSS belongs to Java thread stacks.

        There are other JVM parts that allocate native memory, but they do
        not usually play a big role in total memory consumption.


Try #3: ZHC
Much higher initial heap usage.

	mark@Marks-MBP-3 tinyjhttpd % jps
        82566
        84968 tinyjhttpd
        84970 Jps
        84796 Main
        mark@Marks-MBP-3 tinyjhttpd % N=84968
        mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
           RSS
         96160
        mark@Marks-MBP-3 tinyjhttpd %

	mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
           RSS
        134288
        mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
        84968:
         ZHeap           used 6M, capacity 10M, max capacity 10M
         Metaspace       used 2206K, committed 2368K, reserved 1056768K
          class space    used 169K, committed 256K, reserved 1048576K
        mark@Marks-MBP-3 tinyjhttpd %

Try #4: with tracking virtual memory, back to default gc
50m	gc
25m	Thread
12m	shared class
10m	Heap
 8m	Code
 5m	Class
 5m	native memory tracking



	mark@Marks-MBP-3 tinyjhttpd % jps
        85057 tinyjhttpd
        85063 Jps
        82566
        mark@Marks-MBP-3 tinyjhttpd % N=85057
        mark@Marks-MBP-3 tinyjhttpd % jcmd $N VM.native_memory
        85057:

        Native Memory Tracking:

        Total: reserved=1404664KB, committed=109904KB
        -                 Java Heap (reserved=10240KB, committed=10240KB)
                                    (mmap: reserved=10240KB, committed=10240KB)

        -                     Class (reserved=1048785KB, committed=529KB)
                                    (classes #1378)
                                    (  instance classes #1220, array classes #158)
                                    (malloc=209KB #2737)
                                    (mmap: reserved=1048576KB, committed=320KB)
                                    (  Metadata:   )
                                    (    reserved=8192KB, committed=2112KB)
                                    (    used=2027KB)
                                    (    free=85KB)
                                    (    waste=0KB =0.00%)
                                    (  Class space:)
                                    (    reserved=1048576KB, committed=320KB)
                                    (    used=175KB)
                                    (    free=145KB)
                                    (    waste=0KB =0.00%)

        -                    Thread (reserved=24634KB, committed=24634KB)
                                    (thread #25)
                                    (stack: reserved=24576KB, committed=24576KB)
                                    (malloc=32KB #146)
                                    (arena=26KB #46)

        -                      Code (reserved=247968KB, committed=7828KB)
                                    (malloc=280KB #1679)
                                    (mmap: reserved=247688KB, committed=7548KB)

        -                        GC (reserved=49818KB, committed=49818KB)
                                    (malloc=16666KB #907)
                                    (mmap: reserved=33152KB, committed=33152KB)

        -                  Compiler (reserved=185KB, committed=185KB)
                                    (malloc=21KB #81)
                                    (arena=165KB #5)

        -                  Internal (reserved=168KB, committed=168KB)
                                    (malloc=136KB #730)
                                    (mmap: reserved=32KB, committed=32KB)

        -                     Other (reserved=16KB, committed=16KB)
                                    (malloc=16KB #2)

        -                    Symbol (reserved=1263KB, committed=1263KB)
                                    (malloc=903KB #6159)
                                    (arena=360KB #1)

        -    Native Memory Tracking (reserved=542KB, committed=542KB)
                                    (malloc=220KB #3117)
                                    (tracking overhead=323KB)

        -        Shared class space (reserved=12288KB, committed=12004KB)
                                    (mmap: reserved=12288KB, committed=12004KB)

        -               Arena Chunk (reserved=185KB, committed=185KB)
                                    (malloc=185KB)

        -                   Logging (reserved=5KB, committed=5KB)
                                    (malloc=5KB #209)

        -                 Arguments (reserved=2KB, committed=2KB)
                                    (malloc=2KB #59)

        -                    Module (reserved=117KB, committed=117KB)
                                    (malloc=117KB #985)

        -                 Safepoint (reserved=8KB, committed=8KB)
                                    (mmap: reserved=8KB, committed=8KB)

        -           Synchronization (reserved=232KB, committed=232KB)
                                    (malloc=232KB #3726)

        -                 Metaspace (reserved=13KB, committed=13KB)
                                    (malloc=13KB #18)

        -                   Unknown (reserved=8192KB, committed=2112KB)
                                    (mmap: reserved=8192KB, committed=2112KB)

        mark@Marks-MBP-3 tinyjhttpd %

Try #5: -XX:+UseSerialGC
 0.1m	gc
 0.5m	Class

16m	Thread
11.2m	shared class
10m	Heap
 8m	Code
 5m	native memory tracking


	mark@Marks-MBP-3 tinyjhttpd % jps
        85089 tinyjhttpd
        85090 Jps
        82566
        mark@Marks-MBP-3 tinyjhttpd % N=85089
        mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
           RSS
         38504
        mark@Marks-MBP-3 tinyjhttpd %

        mark@Marks-MBP-3 tinyjhttpd % ab -n 15000 -c 15 http://127.0.0.1:8080/
        This is ApacheBench, Version 2.3 <$Revision: 1879490 $>
        Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
        Licensed to The Apache Software Foundation, http://www.apache.org/

        Benchmarking 127.0.0.1 (be patient)
        Completed 1500 requests
        Completed 3000 requests
        Completed 4500 requests
        Completed 6000 requests
        Completed 7500 requests
        Completed 9000 requests
        Completed 10500 requests
        Completed 12000 requests
        Completed 13500 requests
        Completed 15000 requests
        Finished 15000 requests


        Server Software:
        Server Hostname:        127.0.0.1
        Server Port:            8080

        Document Path:          /
        Document Length:        50 bytes

        Concurrency Level:      15
        Time taken for tests:   5.105 seconds
        Complete requests:      15000
        Failed requests:        0
        Non-2xx responses:      15000
        Total transferred:      1815000 bytes
        HTML transferred:       750000 bytes
        Requests per second:    2938.09 [#/sec] (mean)
        Time per request:       5.105 [ms] (mean)
        Time per request:       0.340 [ms] (mean, across all concurrent requests)
        Transfer rate:          347.18 [Kbytes/sec] received

        Connection Times (ms)
                      min  mean[+/-sd] median   max
        Connect:        0    0   0.3      0      22
        Processing:     1    5   2.3      4      30
        Waiting:        1    4   2.3      4      29
        Total:          1    5   2.4      4      30

        Percentage of the requests served within a certain time (ms)
          50%      4
          66%      5
          75%      5
          80%      6
          90%      8
          95%     10
          98%     12
          99%     15
         100%     30 (longest request)
        mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
           RSS
         66896
        mark@Marks-MBP-3 tinyjhttpd %
        mark@Marks-MBP-3 tinyjhttpd % ab -n 25000 -c 15 http://127.0.0.1:8080/
        This is ApacheBench, Version 2.3 <$Revision: 1879490 $>
        Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
        Licensed to The Apache Software Foundation, http://www.apache.org/

        Benchmarking 127.0.0.1 (be patient)
        Completed 2500 requests
        Completed 5000 requests
        Completed 7500 requests
        Completed 10000 requests
        Completed 12500 requests
        Completed 15000 requests
        Completed 17500 requests
        apr_socket_recv: Operation timed out (60)
        Total of 17640 requests completed
        mark@Marks-MBP-3 tinyjhttpd % ps -orss -p$N
           RSS
         74668
        mark@Marks-MBP-3 tinyjhttpd %



        mark@Marks-MBP-3 tinyjhttpd % jcmd $N VM.native_memory
        85089:

        Native Memory Tracking:

        Total: reserved=1346779KB, committed=52019KB
        -                 Java Heap (reserved=10240KB, committed=10240KB)
                                    (mmap: reserved=10240KB, committed=10240KB)

        -                     Class (reserved=1048787KB, committed=531KB)
                                    (classes #1373)
                                    (  instance classes #1216, array classes #157)
                                    (malloc=211KB #2829)
                                    (mmap: reserved=1048576KB, committed=320KB)
                                    (  Metadata:   )
                                    (    reserved=8192KB, committed=2112KB)
                                    (    used=2029KB)
                                    (    free=83KB)
                                    (    waste=0KB =0.00%)
                                    (  Class space:)
                                    (    reserved=1048576KB, committed=320KB)
                                    (    used=175KB)
                                    (    free=145KB)
                                    (    waste=0KB =0.00%)

        -                    Thread (reserved=16424KB, committed=16424KB)
                                    (thread #17)
                                    (stack: reserved=16384KB, committed=16384KB)
                                    (malloc=24KB #98)
                                    (arena=17KB #30)

        -                      Code (reserved=247993KB, committed=7853KB)
                                    (malloc=305KB #1727)
                                    (mmap: reserved=247688KB, committed=7548KB)

        -                        GC (reserved=101KB, committed=101KB)
                                    (malloc=61KB #190)
                                    (mmap: reserved=40KB, committed=40KB)

        -                  Compiler (reserved=185KB, committed=185KB)
                                    (malloc=20KB #77)
                                    (arena=165KB #5)

        -                  Internal (reserved=155KB, committed=155KB)
                                    (malloc=123KB #642)
                                    (mmap: reserved=32KB, committed=32KB)

        -                     Other (reserved=16KB, committed=16KB)
                                    (malloc=16KB #2)

        -                    Symbol (reserved=1313KB, committed=1313KB)
                                    (malloc=953KB #9366)
                                    (arena=360KB #1)

        -    Native Memory Tracking (reserved=534KB, committed=534KB)
                                    (malloc=184KB #2604)
                                    (tracking overhead=351KB)

        -        Shared class space (reserved=12288KB, committed=12004KB)
                                    (mmap: reserved=12288KB, committed=12004KB)

        -               Arena Chunk (reserved=184KB, committed=184KB)
                                    (malloc=184KB)

        -                   Logging (reserved=5KB, committed=5KB)
                                    (malloc=5KB #209)

        -                 Arguments (reserved=2KB, committed=2KB)
                                    (malloc=2KB #59)

        -                    Module (reserved=117KB, committed=117KB)
                                    (malloc=117KB #985)

        -                 Safepoint (reserved=8KB, committed=8KB)
                                    (mmap: reserved=8KB, committed=8KB)

        -           Synchronization (reserved=222KB, committed=222KB)
                                    (malloc=222KB #3568)

        -                 Metaspace (reserved=13KB, committed=13KB)
                                    (malloc=13KB #18)

        -                   Unknown (reserved=8192KB, committed=2112KB)
                                    (mmap: reserved=8192KB, committed=2112KB)

        mark@Marks-MBP-3 tinyjhttpd %


        mark@Marks-MBP-3 tinyjhttpd % jcmd $N GC.heap_info
        85089:
         def new generation   total 3072K, used 384K [0x00000007ff600000, 0x00000007ff950000, 0x00000007ff950000)
          eden space 2752K,  13% used [0x00000007ff600000, 0x00000007ff65f900, 0x00000007ff8b0000)
          from space 320K,   0% used [0x00000007ff900000, 0x00000007ff900708, 0x00000007ff950000)
          to   space 320K,   0% used [0x00000007ff8b0000, 0x00000007ff8b0000, 0x00000007ff900000)
         tenured generation   total 6848K, used 1363K [0x00000007ff950000, 0x0000000800000000, 0x0000000800000000)
           the space 6848K,  19% used [0x00000007ff950000, 0x00000007ffaa4c40, 0x00000007ffaa4e00, 0x0000000800000000)
         Metaspace       used 2204K, committed 2432K, reserved 1056768K
          class space    used 174K, committed 320K, reserved 1048576K
        mark@Marks-MBP-3 tinyjhttpd %